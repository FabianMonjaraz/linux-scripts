#!/usr/bin/env bash
BASHMARKS="${HOME}/.bashmarks"
usage () {
cat << EOF
$0 [OPERATION] [PARAMETERS]
Script to create, modificate, delete and view bookmarks in bash.
Once created, they can be accessed via "cd @NAME_OF_BOOKMARK"
At this day, the "alias cd='cd -P'" cannot be setted correctly from
this script, so is adviced to create this alias to show a correct 
format from commands like "pwd"

OPERATIONS 
  This script accept only ONE operation
  -d BOOKMARK_NAME 
    Deletes the bookmark BOOKMARK

  -h Show this message

  -l  List the bookmarks along their real path

  -e OLD_BM_NAME NEW_BM_NAME
    Changes the name of OLD_BM_NAME to NEW_BM_NAME
  
  -t BOOKMARK_NAME
    Create a bookmark of the current directory

  -r BM_NAME NEW_PATH_TO_THE_BM
    Redirect the path of an already created bookmark

  -n PATH BOOKMARK_NAME
    Create a new bookmark

FILES AND VARS
  
  ~/.bashmarks
    The bookmarks are stored here, in the form of symlinks

  CDPATH=$CDPATH:~/.bashmarks
    If this variable is not setted, the script sets it in .bashrc
EOF
}

init() {
  CHG=0
  [[ -z $(echo $CDPATH | grep -E "\.bashmark:?") ]] && echo "=== initializing CDPATH ===" && CHG=1 && echo -e '#BASHMARKS: exporting CDPATH\nexport CDPATH="$CDPATH:.:~/.bashmarks"' >> ~/.bashrc
  #[[ -z $(grep -E "alias cd='cd -.*P.*'" $TMP_FILE ) ]] && echo "=== Configuring cd to 'cd -P' ===" && echo -e "#BASHMARKS: configuring cd to behave as 'cd -P'\nalias cd='cd -P'" >> ~/.bashrc   ###ITS NOT POSSIBLE TO RETRIVE AN USER ALIASES INSIDE A SCRIPT. THIS OPTION IS UNAVILABLE AT THIS POINT 
  [[ ! -d $BASHMARKS  ]] && echo "=== creating directory $BASHMARKS ==="  && mkdir $BASHMARKS
  [[ CHG -gt 0 ]] && source ~/.bashrc
}

list_bm() {
  [[ $(find $BASHMARKS -type l | wc -l) -eq 0 ]] && echo "=== No bookmark setted ===" || find $BASHMARKS -type l -printf '%P --> ' -exec readlink -f "{}" \;
}

edit_bm() {
  OLD=$1
  NEW=$2
  [[ ! $OLD =~ ^@.+ ]] && OLD="@"$OLD
  [[ ! -L ${BASHMARKS}/${OLD} ]] && echo "Error: the original bookmark doesn't exist or isn't a valid bookmark" && exit 3
  [[ ! $NEW =~ ^@.+ ]] && NEW="@"$NEW
  mv ${BASHMARKS}/${OLD} ${BASHMARKS}/${NEW}
}

delete_bm() {
  TARGET=$1
  [[ ! $TARGET =~ ^@.+ ]] && TARGET="@"$TARGET
  [[ ! -L ${BASHMARKS}/${TARGET} ]] && echo "Error: the targeted bookmark doesn't exist or isn't a valid bookmark" && exit 3 || unlink ${BASHMARKS}/${TARGET}
}

create_bm() {
  TARGET=$1
  NAME=$2
  [[ ! -d $TARGET ]] && echo "Error: the targeted directory doesn't exist" && exit 4
  [[ ! $NAME =~ ^@.+ ]] && NAME="@"$NAME
  [[ -L ${BASHMARKS}/${NAME} ]] && [[ $RECREATE -eq 0 ]] && echo "Error: $NAME already exists" && exit 4
  ln -s $(realpath $TARGET) ${BASHMARKS}/${NAME}
}

redirect_bm() {
  TARGET=$1
  NAME=$2
  [[ ! $NAME =~ ^@.+ ]] && NAME="@"$NAME
  if [[ ! -L ${BASHMARKS}/${NAME} ]]; then
    create_bm $TARGET $NAME
  else
    [[ ! -d $TARGET ]] && echo "Error: the targeted directory doesn't exist" && exit 4
    unlink ${BASHMARKS}/${NAME}
    ln -s $(realpath $TARGET) ${BASHMARKS}/${NAME}
  fi
  
}

[[ $# -eq 0 ]] && usage && exit 0
init
while getopts d:ehlrt:n OP
do
  case $OP in
    d)
      delete_bm $OPTARG
      exit 0
      ;;
    e)
      shift $(($OPTIND - 1))
      edit_bm $1 $2
      exit 0
      ;;
    h)
      usage
      exit 0
      ;;
    l)
      list_bm 
      exit 0
      ;;
    r)
      shift $(($OPTIND - 1))
      redirect_bm $1 $2
      exit 0
      ;;
    n)
      shift $(($OPTIND - 1))
      create_bm $1 $2
      exit 0
      ;;
    t)
      create_bm . $OPTARG
      exit 0
      ;;
    ?)
      usage
      exit 1
      ;;
  esac
done

